// 프로젝트의 모든 모듈에 공통
plugins {
    id "idea"
    id "eclipse"
    id "java"
    id "java-library"
    id "org.springframework.boot" version "2.4.4" apply false
    id "io.spring.dependency-management" version "1.0.11.RELEASE" apply false
    id "com.diffplug.eclipse.apt" version "3.26.0"
}

// 모든 프로젝트 적용사항
allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'java'
    apply plugin: 'java-library'

    repositories {
        google()
        mavenCentral()
    }

    group 'my.springcloud'
    version '1.0-SNAPSHOT'

    // 자바버전 지정
    sourceCompatibility = 11
    targetCompatibility = 11

    // 컴파일 인코딩 옵션
    compileJava.options.encoding = "UTF-8"
    compileTestJava.options.encoding = "UTF-8"

    // 컴파일 옵션지정
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:-unchecked" << "-Xlint:-deprecation"
        options.fork = true
        options.forkOptions.executable = 'javac'
    }

    jar {
        enabled = false
    }
}

// 하위 프로젝트
subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springBootCloudVersion}"
        }
    }

    // 공통설정
    configurations {
        all.collect { configuration ->
            // configuration.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        }
    }

    // 의존성
    dependencies {
        // configuration processor
        implementation("org.springframework.boot:spring-boot-configuration-processor")

        // jackson
        implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
        implementation("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
        implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jacksonVersion}")
        implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}")
        implementation("com.fasterxml.jackson.module:jackson-module-afterburner:${jacksonVersion}")
        implementation("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}")

        // lombok
        compileOnly("org.projectlombok:lombok:${lombokVersion}")
        // mapstruct
        compileOnly("org.mapstruct:mapstruct:${mapstructVersion}")
        compileOnly("org.mapstruct:mapstruct-processor:${mapstructVersion}")
        compileOnly("org.projectlombok:lombok-mapstruct-binding:0.2.0")

        // 이클립스에서 lombok과 mapstruct 사용 시 설정
        annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
        annotationProcessor("org.mapstruct:mapstruct-processor:${mapstructVersion}")
        annotationProcessor("org.projectlombok:lombok-mapstruct-binding:0.2.0")
        testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")

        implementation("org.springframework.boot:spring-boot-starter-web")
		
        // validation
        implementation("org.springframework.boot:spring-boot-starter-validation")

        // actuator
        implementation("org.springframework.boot:spring-boot-starter-actuator")
		
		// spring cloud 
        implementation("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        implementation("org.springframework.cloud:spring-cloud-starter-config")
        implementation("org.springframework.cloud:spring-cloud-bus")
        implementation("org.springframework.cloud:spring-cloud-starter-bus-kafka")
        implementation("org.springframework.cloud:spring-cloud-sleuth-zipkin")

        // test
        testImplementation("org.springframework.boot:spring-boot-starter-test")
        testImplementation('org.junit.platform:junit-platform-launcher')
        testImplementation('org.junit.jupiter:junit-jupiter-api')
        testImplementation('org.junit.jupiter:junit-jupiter-params')
        testImplementation('org.junit.jupiter:junit-jupiter-engine')
    }

    // 태스크 - scaffolding
    task initSourceFolders {
        sourceSets*.java.srcDirs*.each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }

        sourceSets*.resources.srcDirs*.each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }
    }

}

// ---------------------------------------------------------------------------------------------------------------------
// service-common
// ---------------------------------------------------------------------------------------------------------------------
project(":service-common") {

    bootJar {
        enabled = false
    }
    jar {
        enabled = true
    }

    dependencies {
		api("org.springframework.boot:spring-boot-starter-web")
        api("org.springframework.boot:spring-boot-starter-security")
		api("org.springframework.boot:spring-boot-starter-data-jpa")

        // jwt, https://github.com/jwtk/jjwt
        api("io.jsonwebtoken:jjwt-api:${jjwtVersion}")
        api("io.jsonwebtoken:jjwt-impl:${jjwtVersion}")
        api("io.jsonwebtoken:jjwt-jackson:${jjwtVersion}")

        // mysql
        compileOnly("mysql:mysql-connector-java:${mysqlConnectorVersion}")

        // redis
        api("org.springframework.boot:spring-boot-starter-data-redis")
        api("org.apache.commons:commons-pool2")

        // https://log4jdbc.brunorozendo.com/
        api("org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16")

        // swagger 3
        api("org.springdoc:springdoc-openapi-ui:${springdocVersion}")
        api("org.springdoc:springdoc-openapi-security:${springdocVersion}")
        api("org.springdoc:springdoc-openapi-data-rest:${springdocVersion}")

        // openfeign
        api("org.springframework.cloud:spring-cloud-starter-openfeign")
        api("io.github.openfeign:feign-okhttp")

		// 암복호화
		api("com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.3")

        // User-Agent 파서
        api("com.github.ua-parser:uap-java:1.5.2")
		
        api("org.apache.httpcomponents:httpclient:4.5.13")
        api("commons-io:commons-io:2.11.0")
        api("commons-fileupload:commons-fileupload:1.4")
        api("org.apache.commons:commons-text:1.9")
    }

    // 인텔리제이 Annotation processor 에 생성되는 'src/main/generated' 디렉터리 삭제
    task cleanGeneatedDir(type: Delete) {
        delete file('src/main/generated')
    }

}

// ---------------------------------------------------------------------------------------------------------------------
// account-service
// ---------------------------------------------------------------------------------------------------------------------
project(":account-service") {

    bootRun {
        sourceResources sourceSets.main
        main = 'my.springcloud.AccountApplication'
        jvmArgs = [
                "-server",
                "-Xss256m",
                "-Djava.net.preferIPv4Stack=true"
        ]
        if (project.hasProperty('args')) {
            args project.args.split(',' as Closure)
        }
    }

    bootJar {
        archiveFileName = 'account-service.jar'
        mainClass.set("my.springcloud.AccountApplication")
    }

    springBoot {
        buildInfo()
    }
	
    dependencies {
        api project(":service-common")

        runtimeOnly("mysql:mysql-connector-java:${mysqlConnectorVersion}")

        // HazelCast
        implementation("com.hazelcast:hazelcast-all:4.2")
    }

    test {
        exclude '**/*'
        useJUnitPlatform()
    }

}
